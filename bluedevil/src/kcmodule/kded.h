/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c KDED -p kded.h:kded.cpp /home/ereslibre/proyectos/kde/kdelibs/build/kded/org.kde.kded.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KDED_H_1271348628
#define KDED_H_1271348628

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.kded
 */
class KDED: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.kded"; }

public:
    KDED(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~KDED();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> isModuleAutoloaded(const QString &module)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(module);
        return asyncCallWithArgumentList(QLatin1String("isModuleAutoloaded"), argumentList);
    }

    inline QDBusPendingReply<bool> isModuleLoadedOnDemand(const QString &module)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(module);
        return asyncCallWithArgumentList(QLatin1String("isModuleLoadedOnDemand"), argumentList);
    }

    inline QDBusPendingReply<bool> loadModule(const QString &obj)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(obj);
        return asyncCallWithArgumentList(QLatin1String("loadModule"), argumentList);
    }

    inline QDBusPendingReply<> loadSecondPhase()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("loadSecondPhase"), argumentList);
    }

    inline QDBusPendingReply<QStringList> loadedModules()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("loadedModules"), argumentList);
    }

    inline QDBusPendingReply<> quit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("quit"), argumentList);
    }

    inline QDBusPendingReply<> reconfigure()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("reconfigure"), argumentList);
    }

    inline QDBusPendingReply<> registerWindowId(qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(windowId);
        return asyncCallWithArgumentList(QLatin1String("registerWindowId"), argumentList);
    }

    inline QDBusPendingReply<> setModuleAutoloading(const QString &module, bool autoload)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(module) << qVariantFromValue(autoload);
        return asyncCallWithArgumentList(QLatin1String("setModuleAutoloading"), argumentList);
    }

    inline QDBusPendingReply<bool> unloadModule(const QString &obj)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(obj);
        return asyncCallWithArgumentList(QLatin1String("unloadModule"), argumentList);
    }

    inline QDBusPendingReply<> unregisterWindowId(qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(windowId);
        return asyncCallWithArgumentList(QLatin1String("unregisterWindowId"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    typedef ::KDED kded;
  }
}
#endif
